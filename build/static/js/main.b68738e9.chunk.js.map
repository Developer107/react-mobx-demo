{"version":3,"sources":["pages/Profile.jsx","pages/Login.jsx","routes.jsx","App.js","stores/index.jsx","serviceWorker.js","index.js"],"names":["Profile","updateDetails","bind","e","this","props","profileStore","target","name","value","reactLocalStorage","set","className","surname","age","gender","onChange","type","checked","to","onClick","logout","Component","inject","observer","UserData","id","userName","surName","password","photos","Login","onEnterKey","Object","entries","getObject","length","setObject","get","window","location","href","event","key","attemptToLogin","loginStore","errorMessage","onKeyPress","React","PureComponent","Routes","path","exact","component","App","configure","enforceActions","ProfileStore","initDetails","currentUser","keys","detailType","detailValue","currentUserId","allUserData","autorun","decorate","observable","action","LoginStore","resetLoginDets","loginDets","detailCount","setErrorMessage","_this","setTimeout","isValidLogin","userDetails","authenticateUser","isAuthenticatedUser","loggedInUser","find","user","toLowerCase","trim","computed","RootStore","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b68738e9.chunk.js","sourcesContent":["// Import section\n// modules\nimport React, { Component } from 'react';\nimport { observer, inject } from \"mobx-react\";\nimport { Link } from 'react-router-dom';\nimport { reactLocalStorage } from 'reactjs-localstorage';\n\nclass Profile extends Component {\n    constructor() {\n        super()\n        this.updateDetails = this.updateDetails.bind(this);\n    }\n    updateDetails(e) {\n        const { profileStore } = this.props;\n        const { updateDetails } = profileStore;\n        // call to action\n        updateDetails(e.target.name, e.target.value);\n        // comment enforceActions in profileStore.jsx, comment above line and uncomment below line in this file to check validation on state modification by action\n        // profileStore[e.target.name] = e.target.value;\n    }\n    logout() {\n        reactLocalStorage.set('userId', '');\n    }\n    render() {\n        const { profileStore } = this.props;\n        return (\n            <div>\n                <div className='profile-edit-mode'>\n                    <div>Name: {profileStore.name}</div>\n                    <div>SurName: {profileStore.surname}</div>\n                    <div>Age: {profileStore.age}</div>\n                    <div>Gender: {profileStore.gender}</div>\n                </div>\n                <div className='profile-read-mode'>\n                    <div>Name: <input value={profileStore.name} name='name' onChange={this.updateDetails} /></div>\n                    <div>Surname: <input value={profileStore.surname} name='surname' onChange={this.updateDetails} /></div>\n                    <div>Age: <input value={profileStore.age} name='age' onChange={this.updateDetails} /></div>\n                    <div>Gender:\n                        <div><input type=\"radio\" value=\"female\" name='gender' checked={profileStore.gender === \"female\"} onChange={this.updateDetails} />Female</div>\n                        <div><input type=\"radio\" value=\"male\" name='gender' checked={profileStore.gender === \"male\"} onChange={this.updateDetails} />Male</div>\n                    </div>\n                </div>\n                <Link to=\"/\" onClick={this.logout}>Logout</Link>\n            </div>\n        );\n    }\n}\n\nexport default inject(\"profileStore\")(observer(Profile));","// Import section\n// modules\nimport React from 'react';\nimport { reactLocalStorage } from 'reactjs-localstorage';\nimport { observer, inject } from \"mobx-react\";\n\nconst UserData = [\n  {\n    id: 0,\n    userName: 'Jack',\n    surName: 'Hill',\n    age: 27,\n    gender: 'male',\n    password: 'developer7',\n    photos: [],\n  }, {\n    id: 1,\n    userName: 'Jameson',\n    surName: 'Mount',\n    age: 27,\n    gender: 'male',\n    password: 'developer10',\n    photos: [],\n  }, {\n    id: 2,\n    userName: 'Jim',\n    surName: 'Resort',\n    age: 27,\n    gender: 'male',\n    password: 'developer107',\n    photos: [],\n  },\n];\n\nconst Login = inject(\"loginStore\")(\n  observer(class Login extends React.PureComponent {\n    constructor() {\n      super();\n      this.onEnterKey = this.onEnterKey.bind(this);\n      this.updateDetails = this.updateDetails.bind(this);\n    }\n\n    componentWillMount() {\n      if (!Object.entries(reactLocalStorage.getObject('allUserData')).length) {\n        reactLocalStorage.setObject('allUserData', UserData);\n      }\n      if (reactLocalStorage.get('userId')) {\n        window.location.href = '/profile';\n      }\n    }\n\n    onEnterKey(event) {\n      if (event.key === 'Enter') {\n        const { loginStore } = this.props;\n        const { attemptToLogin } = loginStore;\n        // call to action\n        attemptToLogin();\n      }\n    }\n    updateDetails(e) {\n      const { loginStore } = this.props;\n      const { updateDetails } = loginStore;\n      // call to action\n      updateDetails(e.target.name, e.target.value);\n    }\n    render() {\n      const { loginStore } = this.props;\n      const { userName, password, errorMessage, attemptToLogin } = loginStore;\n\n      return (\n        <div>\n          <div className=\"login-container\">\n            <div className=\"login-input-label\" key=\"username\">\n              User Name:<input\n                value={userName}\n                onKeyPress={this.onEnterKey}\n                name=\"userName\"\n                onChange={this.updateDetails}\n              />\n            </div>\n            <div className=\"login-input-label\" key=\"password\">\n              Password:<input\n                type=\"password\"\n                onKeyPress={this.onEnterKey}\n                value={password}\n                name=\"password\"\n                onChange={this.updateDetails}\n              />\n            </div>\n            <div className=\"btn\" key=\"login\" onClick={attemptToLogin}>Login</div>\n            {!!errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n          </div>\n          <span>NOTE:</span>\n          <br />\n          <small>* Details of newly registered user will be removed on clearing local storage.</small>\n          <br />\n          <small>* Uploaded photos for all users will be removed on clearing local storage.</small>\n        </div>\n\n      );\n    }\n  }))\n\nexport default Login;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Profile from './pages/Profile';\nimport Login from './pages/Login';\n\n\nclass Routes extends React.PureComponent {\n  render() {\n    return (\n      <div>\n        <Router>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/profile\" component={Profile} />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default Routes;\n","// Import section\n// modules\nimport React from 'react';\n\n// assets\nimport './App.css';\n\n// components\nimport Routes from './routes';\n\nconst App = () => ( \n    <div className=\"App\">\n      <Routes />\n    </div>\n  );\n\nexport default App;\n","// Import section\n// modules\nimport { observable, decorate, action, configure, autorun, computed } from \"mobx\"\nimport { reactLocalStorage } from 'reactjs-localstorage';\n/* enforceActions is used for replacing useStrict in mobx:\n@values \n'always' : very strict mode\n'observed': will check that all modifications on state are done by actions only\n'never' : false\n*/\nconfigure({ enforceActions: 'observed' })\n\n/* Profile store : state management for profile page */\nclass ProfileStore {\n    constructor() {\n        const currentUserId = reactLocalStorage.get('userId');\n        const allUserData = reactLocalStorage.getObject('allUserData');\n\n        /* observables : state or variables that can be of any types (object array etc) and are to be observed */\n        this.initDetails(allUserData[currentUserId]);\n\n        /* autorun */\n        autorun(() => {\n            /* changing local storage on every detail update */\n            const currentUserId = reactLocalStorage.get('userId');\n            const allUserData = reactLocalStorage.getObject('allUserData');\n            const currentUser = allUserData[currentUserId];\n            if (!!currentUser && !!Object.keys(currentUser).length) {\n                currentUser.userName = this.name;\n                currentUser.surName = this.surname;\n                currentUser.age = this.age;\n                currentUser.gender = this.gender;\n                reactLocalStorage.setObject('allUserData', allUserData);\n            }\n        });\n\n    }\n\n    initDetails = (currentUser) => {\n        if (!!currentUser && !!Object.keys(currentUser).length) {\n            this.name = currentUser.userName;\n            this.surname = currentUser.surName;\n            this.age = currentUser.age;\n            this.gender = currentUser.gender;\n        }\n    }\n    /* actions : state modifiers */\n    updateDetails = (detailType, detailValue) => {\n        this[detailType] = detailValue;\n    }\n}\ndecorate(ProfileStore, {\n    name: observable,\n    surname: observable,\n    age: observable,\n    gender: observable,\n    updateDetails: action,\n    initDetails: action,\n});\n\n/* Login store : state management for login page */\nclass LoginStore {\n\n    /* observables : state or variables that can be of any types (object array etc) and are to be observed */\n    userName = \"\";\n    password = \"\";\n    errorMessage = \"\";\n    /* computations : calculations on store */\n    get isValidLogin() {\n        return !!this.userName && !!this.password\n    }\n    get authenticateUser() {\n        const allUserData = reactLocalStorage.getObject('allUserData');\n        const loggedInUser = allUserData.find((user) => user.userName.toLowerCase() === this.userName.trim().toLowerCase());\n        const isAuthorizedUser = !!loggedInUser && !!Object.entries(loggedInUser).length;\n        const isAuthenticatedUser = isAuthorizedUser && loggedInUser.password === this.password;\n        return { isAuthenticatedUser, loggedInUser };\n    }\n    /* actions : state modifiers */\n    updateDetails = (detailType, detailValue) => {\n        this[detailType] = detailValue;\n    }\n\n    resetLoginDets = (loginDets) => {\n        for (let detailCount = 0; detailCount < loginDets.length; detailCount++) {\n            this[loginDets[detailCount]] = '';\n        }\n    }\n    setErrorMessage = (errorMessage = 'All fields are required!!') => {\n        this.errorMessage = errorMessage;\n        const _this = this;\n        // reset error message\n        setTimeout(() => {\n            _this.resetLoginDets(['errorMessage']);\n        }, 5000);\n    }\n    attemptToLogin = () => {\n        if (this.isValidLogin) {\n            const userDetails = this.authenticateUser;\n            if (userDetails.isAuthenticatedUser) {\n                // valid user\n                reactLocalStorage.setObject('userId', userDetails.loggedInUser.id);\n                window.location.href = '/profile';\n            } else {\n                this.setErrorMessage('Username or password incorrect!!');\n            }\n        } else {\n            this.setErrorMessage();\n        }\n        // reset user data\n        this.resetLoginDets(['userName', 'password']);\n    }\n}\ndecorate(LoginStore, {\n    userName: observable,\n    password: observable,\n    errorMessage: observable,\n    updateDetails: action,\n    resetLoginDets: action,\n    setErrorMessage: action,\n    attemptToLogin: action,\n    isValidLogin: computed,\n    authenticateUser: computed\n});\n\n/* Root store : for handling multiple stores altogether */\nclass RootStore {\n    constructor() {\n        this.loginStore = new LoginStore(this)\n        this.profileStore = new ProfileStore(this)\n    }\n}\nexport default RootStore;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Import section\n// modules\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'mobx-react';\n\n// components\nimport App from './App';\nimport RootStore from './stores';\n\n// assets\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<Provider {...new RootStore()}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}